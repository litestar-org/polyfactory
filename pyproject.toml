[project]
authors = [
    {name = "Na'aman Hirschfeld", email = "nhirschfeld@gmail.com"},
]
maintainers = [
    {name = "Visakh Unnikrishnan", email = "guacs.guacs@gmail.com"},
    {name = "Cody Fincher", email = "cody.fincher@gmail.com"},
    {name = "Janek NouvertnÃ©", email = "provinzkraut@posteo.de"},
    {name = "Jacob Coffee", email = "jacob@z7x.org"},
    {name = "Peter Schutt", email = "peter.github@proton.me"},
]
keywords = ["dataclasses", "msgspec", "pydantic", "attrs", "sqlalchemy",]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Environment :: Web Environment",
    "Framework :: Pytest",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python",
    "Topic :: Software Development :: Libraries",
    "Topic :: Software Development :: Testing :: Unit",
    "Topic :: Software Development :: Testing",
    "Topic :: Software Development",
    "Topic :: Utilities",
    "Typing :: Typed",
]
name = "polyfactory"
version = "2.10.0"
description = "Mock data generation factories"
readme = "docs/PYPI_README.md"
license = {text = "MIT"}
requires-python = ">=3.8,<4.0"
dependencies = [
    "faker",
    "typing-extensions",
]

[project.optional-dependencies]
sqlalchemy = ["sqlalchemy>=1.4.29",]
pydantic = ["pydantic[email]",]
msgspec = ["msgspec",]
odmantic = ["odmantic", "pydantic[email]",]
beanie = ["beanie", "pydantic[email]",]
attrs = ["attrs>=22.2.0",]
full = ["pydantic", "odmantic", "msgspec", "beanie", "attrs", "sqlalchemy"]

[project.urls]
"Issue Tracker" = "https://github.com/litestar-org/polyfactory/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc"
Changelog = "https://github.com/litestar-org/polyfactory/releases/"
Twitter = "https://twitter.com/LitestarAPI"
Reddit = "https://www.reddit.com/r/LitestarAPI"
Discord = "https://discord.gg/MmcwxztmQb"
Blog = "https://blog.litestar.dev"
homepage = "https://github.com/litestar-org/polyfactory"
repository = "https://github.com/litestar-org/polyfactory"
documentation = "https://github.com/litestar-org/polyfactory"

[build-system]
build-backend = "hatchling.build"
requires = ["hatchling"]

[tool.pdm.scripts]
lint = "pre-commit run --all-files"
test = "pytest tests docs/examples"
docs-serve = "sphinx-autobuild docs docs/_build/ -j auto --watch polyfactory --watch docs --watch tests --port 8002"
ci = {composite = ["lint", "test"]}

[tool.pdm.dev-dependencies]
docs = [
    "sphinx>=7.1.2",
    "sphinx-autobuild>=2021.3.14",
    "auto-pytabs>=0.4.0",
    "sphinx-copybutton>=0.5.2",
    "sphinx-toolbox>=3.5.0",
    "blacken-docs>=1.16.0",
    "sphinx-design>=0.5.0",
    "sphinxcontrib-mermaid>=0.9.2",
    "litestar-sphinx-theme @ git+https://github.com/litestar-org/litestar-sphinx-theme.git",
]
lint = [
    "black>=23.9.1",
    "ruff>=0.0.290",
    "codespell>=2.2.5",
    "mypy>=1.5.1",
    "pre-commit>=3.4.0",
    "blacken-docs>=1.16.0",
    "shellcheck-py>=0.9.0.5",
    "pyright>=1.1.327",
    "sourcery>=1.9.0",
]
test = [
    "pytest>=7.4.2",
    "pytest-asyncio>=0.21.1",
    "pytest-cov>=4.1.0",
    "hypothesis>=6.86.2",
    "annotated-types>=0.5.0",
]
dev = [
    "mongomock-motor>=0.0.21",
    "aiosqlite>=0.19.0",
]

[tool.black]
line-length = 120
include = '\.pyi?$'

[tool.mypy]
exclude = "^tools/.*"
plugins = ["pydantic.mypy"]

warn_unused_ignores = true
warn_redundant_casts = true
warn_unused_configs = true
warn_unreachable = true
warn_return_any = true
strict = true
disallow_untyped_decorators = true
disallow_any_generics = false
implicit_reexport = false
show_error_codes = true

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true
warn_untyped_fields = true

[tool.mypy-tests.typing_test_strict]
disallow_any_generics = true

[tool.pyright]
include = ["polyfactory", "tests", "examples"]
exclude = ["tools/**/*.*"]

[tool.coverage.run]
omit = ["*/tests/*"]

[tool.pytest.ini_options]
addopts = "--strict-config --strict-markers"
asyncio_mode = "auto"
filterwarnings = [
    "ignore:.*pkg_resources.declare_namespace\\('sphinxcontrib'\\).*:DeprecationWarning",
    "ignore:pkg_resources is deprecated as an API:DeprecationWarning",
    # Get rid those above once sphinxcontrib-mermaid doesn't use pkg_resources anymore
    # https://github.com/mgaitan/sphinxcontrib-mermaid/issues/119
]
markers = [
    # Marks tests that use `attrs` library
    "attrs",
]

[tool.coverage.report]
exclude_lines = [
    'pragma: no cover',
    'if TYPE_CHECKING:',
    'except ImportError:',
    'except ImportError as e:',
    '\.\.\.',
]

[tool.ruff]
select = ["ALL"]
ignore = [
    "A003",  # flake8-builtins - class attribute {name} is shadowing a python builtin
    "B010",  # flake8-bugbear - do not call setattr with a constant attribute value
    "D100",  # pydocstyle - missing docstring in public module
    "D101",  # pydocstyle - missing docstring in public class
    "D102",  # pydocstyle - missing docstring in public method
    "D103",  # pydocstyle - missing docstring in public function
    "D104",  # pydocstyle - missing docstring in public package
    "D105",  # pydocstyle - missing docstring in magic method
    "D106",  # pydocstyle - missing docstring in public nested class
    "D107",  # pydocstyle - missing docstring in __init__
    "D202",  # pydocstyle - no blank lines allowed after function docstring
    "D205",  # pydocstyle - 1 blank line required between summary line and description
    "D415",  # pydocstyle - first line should end with a period, question mark, or exclamation point
    "E501",  # pycodestyle line too long, handled by black
    "N818",  # pep8-naming - exception name should be named with an Error suffix
    "S311",  # flake8-bandit - Standard pseudo-random generators are not suitable for security/cryptographic purposes
    "UP037", # pyupgrade - removes quotes from type annotation
]
line-length = 120
src = ["polyfactory", "tests", "docs/examples"]
target-version = "py38"

[tool.ruff.pydocstyle]
convention = "google"

[tool.ruff.pep8-naming]
classmethod-decorators = [
    "classmethod",
    "pydantic.validator",
    "pydantic.root_validator",
    "sqlalchemy.ext.declarative.declared_attr",
]

[tool.ruff.isort]
known-first-party = ["polyfactory", "tests"]

[tool.ruff.per-file-ignores]
"**/*.*" = ["ANN101", "ANN401", "ANN102", "TD",]
"polyfactory/**/*.*" = ["PLR0913",
    "ARG005", # Investigate @guacs
    "FBT001", # Investigate @guacs
    "FBT002", # Investigate @guacs
    "SLF001", # Ignore use of private member access
    ]
"polyfactory/field_meta.py" = ["N806"]
"tests/**/*.*" = [
    "S101",
    "D",
    "ARG",
    "PGH",
    "B",
    "FBT",
    "PTH",
    "A",
    "TCH",
    "DTZ",
    "TRY",
    "EM",
    "S",
    "N",
    "SIM",
    "PLR",
    "BLE",
    "RSE",
    "C901",
    "PLW",
    "G",
    "PIE",
    "RUF012",
    "FA",
    "ANN",
    "SLF",
    "PT",
    "INP",
    "TD",
    "FIX",
    "FBT",
    "PLR0913", # too many arguments
    "PT",
    "ARG002", # Investigate @guacs
    "PERF203", # Investigate @guacs
]
"docs/examples/**/*.*" = [
    "PLR2004", # Investigate @guacs
    "INP001", # Add __init__.py
    ]
"docs/examples/tests/**/*.*" = [
    "S101",
    "D",
    "ARG",
    "PGH",
    "B",
    "FBT",
    "PTH",
    "A",
    "TCH",
    "DTZ",
    "TRY",
    "EM",
    "S",
    "N",
    "SIM",
    "PLR",
    "BLE",
    "RSE",
    "C901",
    "PLW",
    "G",
    "PIE",
]
"docs/**/*.*" = [
    "S",
    "B",
    "DTZ",
    "A",
    "TCH",
    "ERA",
    "D",
    "RET",
    "E731",
    "RUF012",
    "FA100",
    "ARG001",
]
"docs/conf.py" = ["FIX002", "ARG001",]
"tools/**/*.*" = ["D", "ARG", "EM", "TRY", "G", "FBT", "INP"]
