[tool.poetry]
name = "polyfactory"
version = "2.9.0"
description = "Mock data generation factories"
authors = [
    "Na'aman Hirschfeld <nhirschfeld@gmail.com>",
]
maintainers = [
    "Visakh Unnikrishnan <guacs.guacs@gmail.com>",
]
license = "MIT"
readme = "docs/PYPI_README.md"
homepage = "https://github.com/litestar-org/polyfactory"
repository = "https://github.com/litestar-org/polyfactory"
documentation = "https://github.com/litestar-org/polyfactory"
keywords = ["dataclasses", "factory", "msgspec", "pydantic", "attrs", "sqlalchemy", "testing"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Environment :: Web Environment",
    "Framework :: Pytest",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python",
    "Topic :: Software Development :: Libraries",
    "Topic :: Software Development :: Testing :: Unit",
    "Topic :: Software Development :: Testing",
    "Topic :: Software Development",
    "Topic :: Utilities",
    "Typing :: Typed",
]
packages = [{ include = "polyfactory" }]

[tool.poetry.dependencies]
python = ">=3.8,<4.0"
beanie = { version = "*", optional = true }
faker = "*"
msgspec = { version = "*", optional = true }
odmantic = { version = "*", optional = true }
pydantic = { version = "*", optional = true, extras = ["email"] }
typing-extensions = "*"
attrs = {version = ">=22.2.0", optional = true}
sqlalchemy = { version = ">=2", optional = true }

[tool.poetry.group.dev.dependencies]
hypothesis = "*"
mongomock-motor = "*"
pytest = "*"
pytest-asyncio = "*"
pytest-cov = "*"
aiosqlite = "^0.19.0"

[tool.poetry.group.docs.dependencies]
auto-pytabs = "*"
blacken-docs = "*"
litestar-sphinx-theme = { git = "https://github.com/litestar-org/litestar-sphinx-theme.git" }
sphinx = "*"
sphinx-autobuild = "*"
sphinx-copybutton = "*"
sphinxcontrib-mermaid = "*"

[tool.poetry.group.lint]
optional = true

[tool.poetry.group.lint.dependencies]
black = "*"
blacken-docs = "*"
mypy = "*"
pre-commit = "*"
pyright = "*"
ruff = '*'
sourcery = "*"

[tool.poetry.extras]
sqlalchemy = ["sqlalchemy"]
pydantic = ["pydantic"]
msgspec = ["msgspec"]
odmantic = ["odmantic", "pydantic"]
beanie = ["beanie", "pydantic"]
attrs = ["attrs"]
full = ["pydantic", "odmantic", "msgspec", "beanie", "attrs", "sqlalchemy"]

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 120
include = '\.pyi?$'

[tool.pyright]
include = ["polyfactory", "tests", "examples"]

[tool.coverage.run]
omit = ["*/tests/*"]

[tool.pytest.ini_options]
addopts = "--strict-config --strict-markers"
asyncio_mode = "auto"
filterwarnings = [
    "ignore:.*pkg_resources.declare_namespace\\('sphinxcontrib'\\).*:DeprecationWarning",
    "ignore:pkg_resources is deprecated as an API:DeprecationWarning",
    # Get rid those above once sphinxcontrib-mermaid doesn't use pkg_resources anymore
    # https://github.com/mgaitan/sphinxcontrib-mermaid/issues/119
]
markers = [
    # Marks tests that use `attrs` library
    "attrs",
]

[tool.coverage.report]
exclude_lines = [
    'pragma: no cover',
    'if TYPE_CHECKING:',
    'except ImportError:',
    'except ImportError as e:',
    '\.\.\.',
]

[tool.ruff]
select = [
    "A",   # flake8-builtins
    "B",   # flake8-bugbear
    "BLE", # flake8-blind-except
    "C4",  # flake8-comprehensions
    "D",   # pydocstyle
    "DJ",  # flake8-django
    "DTZ", # flake8-datetimez
    "E",   # pycodestyle errors
    "ERA", # eradicate
    "EXE", # flake8-executable
    "F",   # pyflakes
    "G",   # flake8-logging-format
    "I",   # isort
    "ICN", # flake8-import-conventions
    "ISC", # flake8-implicit-str-concat
    "N",   # pep8-naming
    "PIE", # flake8-pie
    "PLC", # pylint - convention
    "PLE", # pylint - error
    "PLW", # pylint - warning
    "PTH", # flake8-use-pathlib
    "Q",   # flake8-quotes
    "RET", # flake8-return
    "RUF", # Ruff-specific rules
    "S",   # flake8-bandit
    "SIM", # flake8-simplify
    "T10", # flake8-debugger
    "T20", # flake8-print
    "TCH", # flake8-type-checking
    "TID", # flake8-tidy-imports
    "UP",  # pyupgrade
    "W",   # pycodestyle - warning
    "YTT", # flake8-2020
]

ignore = [
    "A003",  # flake8-builtins - class attribute {name} is shadowing a python builtin
    "B010",  # flake8-bugbear - do not call setattr with a constant attribute value
    "D100",  # pydocstyle - missing docstring in public module
    "D101",  # pydocstyle - missing docstring in public class
    "D102",  # pydocstyle - missing docstring in public method
    "D103",  # pydocstyle - missing docstring in public function
    "D104",  # pydocstyle - missing docstring in public package
    "D105",  # pydocstyle - missing docstring in magic method
    "D106",  # pydocstyle - missing docstring in public nested class
    "D107",  # pydocstyle - missing docstring in __init__
    "D202",  # pydocstyle - no blank lines allowed after function docstring
    "D205",  # pydocstyle - 1 blank line required between summary line and description
    "D415",  # pydocstyle - first line should end with a period, question mark, or exclamation point
    "E501",  # pycodestyle line too long, handled by black
    "N818",  # pep8-naming - exception name should be named with an Error suffix
    "S311",  # flake8-bandit - Standard pseudo-random generators are not suitable for security/cryptographic purposes
    "UP037", # pyupgrade - removes quotes from type annotation
]
line-length = 120
src = ["polyfactory", "tests", "docs/examples"]
target-version = "py38"

[tool.ruff.pydocstyle]
convention = "google"

[tool.ruff.pep8-naming]
classmethod-decorators = [
    "classmethod",
    "pydantic.validator",
    "pydantic.root_validator",
    "sqlalchemy.ext.declarative.declared_attr",
]

[tool.ruff.isort]
known-first-party = ["polyfactory", "tests"]

[tool.ruff.per-file-ignores]
"polyfactory/field_meta.py" = ["N806"]
"tests/**/*.*" = [
    "S101",
    "D",
    "ARG",
    "PGH",
    "B",
    "FBT",
    "PTH",
    "A",
    "TCH",
    "DTZ",
    "TRY",
    "EM",
    "S",
    "N",
    "SIM",
    "PLR",
    "BLE",
    "RSE",
    "C901",
    "PLW",
    "G",
    "PIE",
    "RUF012",
]
"docs/examples/tests/**/*.*" = [
    "S101",
    "D",
    "ARG",
    "PGH",
    "B",
    "FBT",
    "PTH",
    "A",
    "TCH",
    "DTZ",
    "TRY",
    "EM",
    "S",
    "N",
    "SIM",
    "PLR",
    "BLE",
    "RSE",
    "C901",
    "PLW",
    "G",
    "PIE",
]
"docs/**/*.*" = [
    "S",
    "B",
    "DTZ",
    "A",
    "TCH",
    "ERA",
    "D",
    "RET",
    "E731",
    "RUF012",
]
