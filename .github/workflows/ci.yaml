name: Tests And Linting

on:
  pull_request:
  push:
    branches:
      - main

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install Pre-Commit
        run: python -m pip install pre-commit && pre-commit install

      - name: Load cached Pre-Commit Dependencies
        id: cached-pre-commit-dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pre-commit/
          key: pre-commit|${{ env.pythonLocation }}|${{ hashFiles('.pre-commit-config.yaml') }}

      - name: Execute Pre-Commit
        run: pre-commit run --show-diff-on-failure --color=always --all-files

  test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]
        pydantic-version: ["1.10", "2.0"]
        sqla-version: ["1.4", "2"]
        exclude:
          - pydantic-version: "1.10"
            sqla-version: "1.4"
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up python ${{ matrix.python-version }}
        id: checkout-python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Create cache file
        run: echo '${{ matrix.pydantic-version }}-${{ matrix.sqla-version }}' > ./matrix-file.txt

      - uses: pdm-project/setup-pdm@v3
        name: Set up PDM
        with:
          python-version: ${{ matrix.python-version }}
          allow-python-prereleases: true
          cache: true
          cache-dependency-path: |
            ./pdm.lock
            ./matrix-file.txt

      - name: Install pydantic
        if: matrix.pydantic-version == '1.10'
        run: pdm add --no-sync -G pydantic "pydantic[email]==1.10.10"

      - name: Install SQLAlchemy
        if: matrix.sqla-version == '1.4'
        run: pdm add --no-sync -G sqlalchemy "sqlalchemy==1.4.49"

      - name: Install dependencies
        run: pdm sync -G:all

      - name: Set pythonpath
        run: echo "PYTHONPATH=$PWD" >> $GITHUB_ENV

      - name: Test
        if: matrix.python-version != '3.11' || matrix.pydantic-version != '2.0' || matrix.sqla-version != '2'
        run: pdm run pytest tests

      - name: Test with Coverage
        if: matrix.python-version == '3.11' && matrix.pydantic-version == '2.0' && matrix.sqla-version == '2'
        run: pdm run pytest tests docs/examples --cov=. --cov-report=xml

      - uses: actions/upload-artifact@v3
        if: matrix.python-version == '3.11'
        with:
          name: coverage-xml
          path: coverage.xml

  build-docs:
    needs:
      - validate
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - uses: pdm-project/setup-pdm@v3
        name: Set up PDM
        with:
          python-version: "3.11"
          allow-python-prereleases: true
          cache: true

      - name: Install dependencies
        run: pdm install -G:all

      - name: Build docs
        run: pdm run make docs

      - name: Save PR number
        env:
          PR_NUMBER: ${{ github.event.number }}
        run: echo $PR_NUMBER > .pr_number

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: docs-preview
          path: |
            docs/_build/html
            .pr_number

  sonar:
    needs:
      - test
      - validate
    if: github.event.pull_request.head.repo.fork == false
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Download Artifacts
        uses: actions/download-artifact@v3
        with:
          name: coverage-xml

      - name: Fix coverage file for sonarcloud
        run: sed -i "s/home\/runner\/work\/polyfactory\/polyfactory/github\/workspace/g" coverage.xml

      - name: SonarCloud Scan
        uses: sonarsource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  codeql:
    needs:
      - test
      - validate
    runs-on: ubuntu-latest
    permissions:
      security-events: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize CodeQL With Dependencies
        if: github.event_name == 'push' && github.ref_name == 'main'
        uses: github/codeql-action/init@v2

      - name: Initialize CodeQL Without Dependencies
        if: github.event_name == 'pull_request'
        uses: github/codeql-action/init@v2
        with:
          setup-python-dependencies: false

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
