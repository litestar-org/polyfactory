name: ci
on:
  pull_request:
  push:
    branches:
      - main
jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      - name: Install Pre-Commit
        run: python -m pip install pre-commit && pre-commit install
      - name: Load cached Pre-Commit Dependencies
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pre-commit/
          key: pre-commit-4|${{ env.pythonLocation }}|${{ hashFiles('.pre-commit-config.yaml') }}
      - name: Execute Pre-Commit
        run: pre-commit run --show-diff-on-failure --color=always --all-files
  test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]
        pydantic-version: ["1.10", "2.0"]
    steps:
      - name: Check out repository
        uses: actions/checkout@v3
      - name: Set up python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: v1-venv-${{ runner.os }}-${{ matrix.python-version }}-${{ matrix.pydantic-version}}-${{ hashFiles('**/poetry.lock') }}
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --extras full
      - name: Install pydantic
        if: matrix.pydantic-version == '1.10'
        run: source .venv/bin/activate && pip install "pydantic==1.10.10"
      - name: Set pythonpath
        run: echo "PYTHONPATH=$PWD" >> $GITHUB_ENV
      - name: Test
        if: matrix.python-version != '3.11' || matrix.pydantic-version != '2.0'
        run: poetry run pytest
      - name: Test with Coverage
        if: matrix.python-version == '3.11' && matrix.pydantic-version == '2.0'
        run: poetry run pytest --cov=. --cov-report=xml
      - uses: actions/upload-artifact@v3
        if: matrix.python-version == '3.11'
        with:
          name: coverage-xml
          path: coverage.xml
  check-docs:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.4.0
          virtualenvs-create: false
          installer-parallel: true
          virtualenvs-in-project: true
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-docs-${{ hashFiles('**/poetry.lock') }}
      - name: Install docs dependencies
        run: poetry install --no-interaction --with docs --extras full
      - name: Build docs
        run: poetry run make docs
  sonar:
    needs:
      - test
      - validate
    if: github.event.pull_request.head.repo.fork == false
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v3
      - name: Download Artifacts
        uses: actions/download-artifact@v3
        with:
          name: coverage-xml
      - name: Fix coverage file for sonarcloud
        run: sed -i "s/home\/runner\/work\/polyfactory\/polyfactory/github\/workspace/g" coverage.xml
      - name: SonarCloud Scan
        uses: sonarsource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  codeql:
    needs:
      - test
      - validate
    runs-on: ubuntu-latest
    permissions:
      security-events: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Initialize CodeQL With Dependencies
        if: github.event_name == 'push' && github.ref_name == 'main'
        uses: github/codeql-action/init@v2
      - name: Initialize CodeQL Without Dependencies
        if: github.event_name == 'pull_request'
        uses: github/codeql-action/init@v2
        with:
          setup-python-dependencies: false
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
